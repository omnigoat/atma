<?xml version="1.0" encoding="utf-8"?>

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<!-- MATH -->
	<Type Name="atma::math::vector4f">
		<DisplayString>{{ {x}, {y}, {z}, {w} }}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
			<Item Name="w">w</Item>
		</Expand>
	</Type>

	<Type Name="atma::math::vector4i">
		<DisplayString>{{ {x}, {y}, {z}, {w} }}</DisplayString>
		<Expand>
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
			<Item Name="w">w</Item>
		</Expand>
	</Type>

	<!-- GENERAL -->
	<Type Name="atma::intrusive_ptr&lt;*&gt;">
		<DisplayString>{px}</DisplayString>
		<Expand>
			<ExpandedItem>px</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="atma::vector&lt;*,*&gt;">
		<DisplayString>{{ size={size_} }}</DisplayString>
		<Expand>
			<Item Name="capacity">capacity_</Item>
			<Item Name="size">size_</Item>
			<ArrayItems>
				<Size>size_</Size>
				<ValuePointer>imem_.ptr</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="atma::base_lockfree_queue_t::housekeeping_t">
		<DisplayString>{{ buffer-size={buffer_size_} }}</DisplayString>
		<Expand>
			<Synthetic Name="r">
				<DisplayString>{r} ({r % buffer_size_} : {r / buffer_size_})</DisplayString>
			</Synthetic>
			<Synthetic Name="w">
				<DisplayString>{w} ({w % buffer_size_} : {w / buffer_size_})</DisplayString>
			</Synthetic>
			<Synthetic Name="e">
				<DisplayString>{e} ({e % buffer_size_} : {e / buffer_size_})</DisplayString>
			</Synthetic>
			<Synthetic Name="f">
				<DisplayString>{f} ({f % buffer_size_} : {f / buffer_size_})</DisplayString>
			</Synthetic>
		</Expand>
	</Type>

	<!-- ebo_pair -->
	<!--<Type Name="atma::detail::ebo_pair_impl&lt;*,*,*,1,0&gt;">
		<DisplayString>ebo_pair_t&lt;{"$T1",sb}, {"$T2",sb}&gt;</DisplayString>
		<Expand>
			<Item Name="first">($T1&amp;)*this,nd</Item>
			<Item Name="second">second_,nd</Item>
		</Expand>
	</Type>

	<Type Name="atma::detail::ebo_pair_impl&lt;*,*,*,0,1&gt;">
		<DisplayString>ebo_pair_t&lt;{"$T1",sb}, {"$T2",sb}&gt;</DisplayString>
		<Expand>
			<Item Name="first">first_</Item>
			<Item Name="second">($T2&amp;)*this,nd</Item>
		</Expand>
	</Type>-->

	<!-- ebo_pair -->
	<Type Name="atma::ebo_pair_t&lt;*&gt;">
		<DisplayString>ebo_pair_t&lt;{"$T1",sb}, {"$T2",sb}&gt;</DisplayString>
		<Expand>
			<Item Optional="true" Name="first">first_</Item>
			<Item Optional="true" Name="first">static_cast&lt;$T1&amp;&gt;(*this),nd</Item>
			<Item Optional="true" Name="second">second_</Item>
			<Item Optional="true" Name="second">static_cast&lt;$T2&amp;&gt;(*this),nd</Item>
		</Expand>
	</Type>
	
	
	
	
	
	
	
	
	
	
	<!-- memory -->

	<!-- memxfer_t -->
	<Type Name="atma::memxfer_t&lt;atma::dest_memory_tag_t, *&gt;">
		<DisplayString>dest_memxfer_t&lt;{"$T1", sb}&gt;</DisplayString>
		<Expand>
			<Item Optional="true" Name="allocator">alloc_and_ptr_.first_</Item>
			<Item Optional="true" Name="allocator">static_cast&lt;$T2&amp;&gt;(alloc_and_ptr_)</Item>
			<Item Optional="true" Name="data">alloc_and_ptr_.second_</Item>
			<Item Optional="true" Name="data">static_cast&lt;$T1&amp;&gt;(alloc_and_ptr_)</Item>
		</Expand>
	</Type>

	<Type Name="atma::memxfer_t&lt;atma::src_memory_tag_t, *&gt;">
		<DisplayString>src_memxfer_t&lt;{"$T1", sb}&gt;</DisplayString>
		<Expand>
			<Item Optional="true" Name="allocator">alloc_and_ptr_.first_</Item>
			<Item Optional="true" Name="allocator">static_cast&lt;$T2&amp;&gt;(alloc_and_ptr_)</Item>
			<Item Optional="true" Name="data">alloc_and_ptr_.second_</Item>
			<Item Optional="true" Name="data">static_cast&lt;$T1&amp;&gt;(alloc_and_ptr_)</Item>
		</Expand>
	</Type>

	<Type Name="atma::detail::bounded_memxfer_impl_t&lt;*,*,-1,*&gt;">
		<DisplayString>src_bounded_memxfer_t&lt;{"$T1", sb}&gt;</DisplayString>
		<Expand>
			<!-- I can't understand the spaces for templating here... -->
			<Item Optional="true" Name="allocator">alloc_and_ptr_.first_</Item>
			<Item Optional="true" Name="allocator">static_cast&lt;$T2&amp;&gt;(alloc_and_ptr_)</Item>
			<Item Optional="true" Name="data">alloc_and_ptr_.second_,[size_]</Item>
			<Item Optional="true" Name="data">static_cast&lt;$T1&amp;&gt;(alloc_and_ptr_),[size_]</Item>
			
			<Item Name="size">size_</Item>
			
			<Synthetic Name="[elements]">
				<DisplayString>{{ size={size_} }}</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>size_</Size>
						<ValuePointer>alloc_and_ptr_.second_</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>
	
	<!-- bounded_memxfer_t -->
	<Type Name="atma::bounded_memxfer_t&lt;atma::dest_memory_tag_t,*&gt;">
		<DisplayString>dest_bounded_memxfer_t&lt;{"$T1", sb}&gt;</DisplayString>
		<Expand>
			<!-- I can't understand the spaces for templating here... -->
			<ExpandedItem >(atma::detail::bounded_memxfer_impl_t&lt;atma::dest_memory_tag_t,$T1,$T2,$T3&gt;*)this</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="atma::bounded_memxfer_t&lt;atma::src_memory_tag_t,*&gt;">
		<DisplayString>src_bounded_memxfer_t&lt;{"$T1", sb}&gt;</DisplayString>
		<Expand>
			<!-- I can't understand the spaces for templating here... -->
			<ExpandedItem>(atma::detail::bounded_memxfer_impl_t&lt;atma::src_memory_tag_t,$T1 ,$T2,$T3&gt;*)this</ExpandedItem>
		</Expand>
	</Type>


	
	
	
	


	<!-- rope_node_t -->
	<Type Name="atma::_rope_::node_t&lt;*&gt;">
		<DisplayString Condition="node_type_==node_type_t::branch">{{ internal-node }}</DisplayString>
		<DisplayString Condition="node_type_==node_type_t::leaf">{{ leaf-node-buffer={((atma::_rope_::node_leaf_t&lt;$T1&gt;&amp;)*this).buf.chars_,[((atma::_rope_::node_leaf_t&lt;$T1&gt;&amp;)*this).buf.size_]s8} }}</DisplayString>
		<DisplayString>{{ empty }}</DisplayString>
		
		<Expand>
			<Item Condition="node_type_==node_type_t::branch" Name="size">((atma::_rope_::node_internal_t&lt;$T1&gt;*)this)->size_</Item>
			<Item Condition="node_type_==node_type_t::branch" Name="height">((atma::_rope_::node_internal_t&lt;$T1&gt;*)this)->height_</Item>
			
			<!-- internal-node children -->
			<ArrayItems Condition="node_type_==node_type_t::branch">
				<Size>$T1::branching_factor</Size>
				<ValuePointer>((atma::_rope_::node_internal_t&lt;$T1&gt;*)this)->children_._Elems</ValuePointer>
			</ArrayItems>

			<!-- leaf-node information -->
			<Item Condition="node_type_==node_type_t::leaf" Name="buffer-size">((atma::_rope_::node_leaf_t&lt;$T1&gt;*)this)->buf.size_</Item>
			<Item Condition="node_type_==node_type_t::leaf" Name="buffer-data">((atma::_rope_::node_leaf_t&lt;$T1&gt;*)this)->buf</Item>
		</Expand>
	</Type>

	<!-- node_leaf_t -->
	<Type Name="atma::_rope_::node_leaf_t&lt;*&gt;">
		<DisplayString>{buf.chars_,[buf.size_]s8}</DisplayString>
		<Expand>
			<Item Name="[buf]">buf</Item>
		</Expand>
	</Type>

	<!-- node_info_t -->
	<Type Name="atma::_rope_::node_info_t&lt;*&gt;">
		<!-- internal-node -->
		<DisplayString Condition="node.px &amp;&amp; node.px->node_type_==node_type_t::branch">node_info :: internal-node {{ chars={characters}, bytes={bytes} }}</DisplayString>
		<!-- leaf-node -->
		<DisplayString Condition="node.px &amp;&amp; node.px->node_type_==node_type_t::leaf">node_info :: leaf-node {{ chars={characters}, bytes={bytes}, {((atma::_rope_::node_leaf_t&lt;$T1&gt;*)node.px)->buf.chars_ + dropped_bytes,[bytes]s8} }}</DisplayString>
		<!-- invalid -->
		<DisplayString>{{ empty }}</DisplayString>
		
		<Expand>
			<Item Name="bytes">bytes</Item>
			<Item Name="characters">characters</Item>
			<Item Name="dropped_bytes">dropped_bytes</Item>
			<Item Name="dropped_characters">dropped_characters</Item>
			<Item Name="line_breaks">line_breaks</Item>
			<Item Condition="node.px &amp;&amp; node.px->node_type_==node_type_t::branch" Name="children">children</Item>
			<Item Name="node">node</Item>

			<!-- internal-node members -->
			<Item Condition="node.px &amp;&amp; node.px->node_type_==node_type_t::branch" Name="[internal-node children]">((atma::_rope_::node_internal_t&lt;$T1&gt;*)node.px)->children_</Item>

			<!-- leaf-node members -->
			<Item Condition="node.px &amp;&amp; node.px->node_type_==node_type_t::leaf" Name="[leaf-node text]">((atma::_rope_::node_leaf_t&lt;$T1&gt;*)node.px)->buf.chars_,[characters]s8</Item>
		</Expand>
	</Type>

</AutoVisualizer>
